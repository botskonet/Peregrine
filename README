Peregrine - A PHP Security/Caging Class
Copyright (c) 2009, Michael Botsko Botsko.net, LLC
Released under the MPL 1.1

Introduction
============================

Peregrine is a PHP object that aims to improve PHP superglobal security
by transferring the raw incoming values to private member variables. You may
then access the data using a wide range of higher security filtering functions.

You may also pass in arrays of custom data to build a custom cage. The filters
available range from integers, alpha-numeric, emails, url, IP, phone, etc.

It's very easy to work with Peregrine and to integrate it into your framework
or application.


Basics
============================

First, simply create an instance after including the class file in your code.

$peregrine = new Peregrine;

To automatically copy and destroy the existing superglobals so that
you're forced to access them through the secure cages, simply call the init
function:

$peregrine->init();

For example, to access an incoming GET value that needs to be an integer, simply
call:

$peregrine->get->getInt('user_id');
// might equal (bool)true


Method Types
============================

All of the available functions may be called with either a get__() or is__()
format. For example, to simply test if an array element is a certain value,
simply run:

$peregrine->get->isInt('user_id');

You'll get a boolean return telling if it *is* an integer or not.

If you want to return the value if it meets your criteria, or at least
the characters that do, you may call the get__() version:

$peregrine->get->getInt('user_id');
// might equal (int)1

For a complete list of methods, take a look at the peregrine class.


Custom Cages
============================

You may pass your own arrays to Peregrine using the sanitize method. It will
delete your original array so that the data only exists in the returned object.

$yourarray = array('myname'=>'Mike Botsko');

$peregrine = new Peregrine;
$clean = $peregrine->sanitize( $yourarray );

You may use Peregrine as usual:

$clean->getName('myname');



Known Issues
============================

- The session superglobal is the only one not destroyed because dealing with it
is tricky. Since the $_SESSION array is frequently modified by applications, it
can refresh it by running:

$peregrine->refreshCage('session');

We're working to improve this so that the original session may not be used.
Comments or suggestions are appreciated.